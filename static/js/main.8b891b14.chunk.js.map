{"version":3,"sources":["data/Top.js","data/Todoitem.js","data/Ipbar.js","data/Main.js","App.js","serviceWorker.js","index.js"],"names":["Top","className","Todoitem","setTodos","todos","text","onclick","filter","el","id","Ipbar","useState","inputv","setInputv","value","onChange","e","target","console","log","type","onClick","preventDefault","completed","Math","random","class","aria-hidden","map","tt","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oNAuBeA,MArBf,WACI,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,WACT,yBAAKA,UAAU,QAAf,gBAMN,wBAAIA,UAAU,YACV,qCACA,uCACA,4C,cCWLC,EAzBE,SAAC,EAAD,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAWC,EAAW,EAAXA,MAQ1B,OACA,6BACI,yBAAKH,UAAU,iBACf,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,aAAaG,EAAMC,MAEtC,yBAAKJ,UAAU,eACX,4BAAQA,UAAU,gBAAe,uBAAGA,UAAU,kBAC9C,4BAAQA,UAAU,eAAeK,QAbnB,WAClBH,EAASC,EAAMG,QAAO,SAACC,GAAD,OAAQA,EAAGC,KAAML,EAAMK,SAYgB,uBAAGR,UAAU,uBC6CnES,EA1DG,WAAM,IAAD,EACKC,mBAAS,IADd,mBACbC,EADa,KACNC,EADM,OAGGF,mBAAS,IAHZ,mBAGbP,EAHa,KAGPD,EAHO,KA4BnB,OACI,yBAAKF,UAAU,cACX,yBAAKA,UAAU,YACP,0BAAOA,UAAU,aACb,2BAAOa,MAAOF,EAAQG,SA3BjB,SAACC,GACtBH,EAAUG,EAAEC,OAAOH,OAEnBI,QAAQC,IAAIf,EAAM,iBAClBc,QAAQC,IAAIf,IAuBsDgB,KAAK,OAAOnB,UAAU,eACxE,4BAAQmB,KAAK,SAASC,QApBpB,SAACL,GACfA,EAAEM,iBACNnB,EAAS,GAAD,mBACAC,GADA,CAEJ,CAACC,KAAKO,EAAOW,WAAU,EAAMd,GAAkB,IAAde,KAAKC,aAGtCP,QAAQC,IAAI,UAEhBN,EAAU,KAWoDZ,UAAU,iBACpD,uBAAGyB,MAAM,oBAAoBC,cAAY,WAIjD,yBAAK1B,UAAU,YAKdG,EAAMwB,KAAK,SAAAC,GAAE,OACQ,kBAAC,EAAD,CAAUxB,KAAMwB,EAAI1B,SAAU0B,EAAG1B,cANvD,QC5BD2B,MAXnB,WAEI,OACI,yBAAK7B,UAAU,WACX,kBAAC,EAAD,QCQG8B,MAVf,WAEE,OACE,6BACE,iCAAM,kBAAC,EAAD,OACN,iCAAM,kBAAC,EAAD,SCCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.8b891b14.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\n\r\nfunction Top() {\r\n    return(\r\n        <div className=\"navbar\">\r\n            <div className=\"elements\">\r\n                <div className=\"leftbar\">\r\n                      <div className=\"logo\">\r\n                      Jerry Todos\r\n                          </div> \r\n\r\n                </div>\r\n                \r\n                <ul className=\"rightbar\">\r\n                    <li> home</li>\r\n                    <li>contact</li>\r\n                    <li>location</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );   \r\n};\r\n\r\nexport default Top;","import React from 'react';\r\n\r\nconst Todoitem = ({setTodos},{todos}) => {\r\n    //todos\r\n\r\n    const deletehandler = () =>{\r\n        setTodos(todos.filter((el) => el.id!== todos.id));\r\n    }\r\n\r\n\r\n    return(    \r\n    <div>\r\n        <div className=\"listcontainer\">\r\n        <div className=\"todolistelement\">\r\n            <div className=\"todo-text\">{todos.text}</div>\r\n       \r\n        <div className=\"button-item\">\r\n            <button className=\"check-button\"><i className=\"fas fa-check\"></i></button>\r\n            <button className=\"trash-button\" onclick={deletehandler}><i className=\"fas fa-trash\"></i></button>\r\n        </div>\r\n       \r\n        </div>\r\n    </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Todoitem;","import React,{useEffect,useState} from 'react';\r\nimport Todoitem from './Todoitem';\r\n\r\n// function Ipbar() {\r\n//  <link href=\"//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css\" rel=\"stylesheet\"></link> \r\n    const Ipbar = () =>{\r\n    const[inputv,setInputv]=useState(\"\");\r\n    // const[todos,setTodos]=useState([{text:\"jerry\",completed:\"false\",id:\"1\"},{text:\"joanna\",completed:\"false\" ,id:\"2\"}]);\r\n    const[todos,setTodos]=useState([]);\r\n\r\n    const inputtexthandler = (e) =>{\r\n        setInputv(e.target.value);\r\n        // console.log(e.target.value);\r\n        console.log(todos+\" food is good\");\r\n        console.log(todos);\r\n\r\n    }\r\n\r\n    const submithandler = (e) =>{\r\n            e.preventDefault();\r\n        setTodos(\r\n            [...todos,\r\n            {text:inputv,completed:false,id: Math.random()*100}\r\n            ]);\r\n          \r\n            console.log(\"hurray\");\r\n         \r\n        setInputv(\"\");\r\n\r\n        }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"mainlayout\">\r\n            <div className=\"mainlist\">\r\n                    <form  className=\"form-todo\">\r\n                        <input value={inputv} onChange={inputtexthandler} type=\"text\" className=\"input-todo\"/>\r\n                        <button type=\"submit\" onClick={submithandler} className=\"submit-button\">\r\n                            <i class=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\r\n                    \r\n                        </button>\r\n                    </form>\r\n                    <div className=\"formdata\">\r\n                    {/* {todos.map(todo =>(\r\n                        <Todoitem todos={todo}/>\r\n                    ))} */}\r\n\r\n                    {todos.map( tt => (\r\n                                          <Todoitem text={tt} setTodos={tt.setTodos}/>\r\n\r\n                    )\r\n                    )};\r\n                    {/* <Todoitem />\r\n                    <Todoitem /> */}\r\n                    \r\n                    </div>\r\n        \r\n            </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Ipbar;","import React from 'react';\r\nimport Ipbar from './Ipbar.js';\r\n\r\n\r\nfunction Main() {\r\n\r\n    return(\r\n        <div className=\"content\">\r\n            <Ipbar />\r\n            \r\n            \r\n         </div>\r\n    );\r\n};\r\n\r\n    export default Main;","import React,{useState} from 'react';\nimport './App.css';\nimport Tweets from './components/Tweets';\nimport Top from './data/Top'\nimport Main from './data/Main'\n\nfunction App() {\n\n  return (\n    <div>\n      <div> <Top/></div>\n      <div> <Main /></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}